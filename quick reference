# Quick Reference & Cheat Sheet

## Installation One-Liners

### Windows
```bash
python -m venv venv && venv\Scripts\activate && pip install -r requirements.txt
```

### macOS
```bash
python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt
```

### Linux
```bash
python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt
```

---

## Common Commands

### Run with Webcam
```bash
python main.py
```

### Run with Video File
```bash
python main.py --source video_file --path data/sample_video.mp4
```

### High Sensitivity (Detect More)
```bash
python main.py --sensitivity high
```

### Low Sensitivity (Fewer False Alarms)
```bash
python main.py --sensitivity low
```

### Custom Config
```bash
python main.py --config my_config.yaml
```

---

## Configuration Quick Guide

### config.yaml Essentials

```yaml
# 1. Video Source
source: "webcam"  # or "video_file" or "rtsp_url"
video_path: "data/sample_video.mp4"

# 2. Detection Sensitivity
confidence_threshold: 0.5  # 0.3-0.7 (lower = more sensitive)
anomaly_threshold: 0.6     # 0.3-0.8 (lower = more sensitive)

# 3. Performance
skip_frames: 2  # Process every 2nd frame
frame_width: 640
frame_height: 480

# 4. Alerts
alert_type: "console"  # or "email" or "both"
```

### Sensitivity Presets

**High Sensitivity** (catch everything):
```yaml
confidence_threshold: 0.3
anomaly_threshold: 0.4
```

**Medium Sensitivity** (balanced):
```yaml
confidence_threshold: 0.5
anomaly_threshold: 0.6
```

**Low Sensitivity** (only obvious threats):
```yaml
confidence_threshold: 0.7
anomaly_threshold: 0.8
```

---

## Email Setup (Gmail)

1. **Enable 2FA** on Google Account
2. **Get App Password**: https://myaccount.google.com/apppasswords
3. **Update config.yaml**:
```yaml
alert_type: "email"
email_config:
  sender: "your_email@gmail.com"
  password: "xxxx xxxx xxxx xxxx"  # 16-char app password
  recipient: "alert@example.com"
```

---

## Keyboard Shortcuts

| Key | Action |
|-----|--------|
| **q** | Quit application |
| **s** | Save screenshot |
| **Space** | Pause/Resume (if implemented) |

---

## Troubleshooting Quick Fix

### "No module named 'cv2'"
```bash
pip install opencv-python --upgrade
```

### "No module named 'tensorflow'"
```bash
pip install tensorflow --upgrade
```

### Webcam not working
```bash
# List available cameras
python -c "import cv2; cv2.VideoCapture(0).release()"

# Try different camera index
# In main.py, change camera_index from 0 to 1, 2, etc.
```

### Email not sending
```bash
# 1. Check credentials in config.yaml
# 2. Verify app password (not regular password)
# 3. Enable less secure apps on Gmail
# 4. Check firewall/antivirus
```

### High CPU usage
```yaml
# In config.yaml, increase skip_frames:
skip_frames: 5  # Process every 5th frame

# Or reduce resolution:
frame_width: 320
frame_height: 240
```

---

## Performance Tuning

### For Slow PC
```yaml
skip_frames: 5
frame_width: 320
frame_height: 240
confidence_threshold: 0.6
anomaly_threshold: 0.7
```

### For Fast PC with GPU
```yaml
skip_frames: 1
frame_width: 1280
frame_height: 720
confidence_threshold: 0.3
anomaly_threshold: 0.4
```

---

## Testing

### Test with Sample Video
```bash
python main.py --source video_file --path data/sample_video.mp4
```

### Test Email Alerts
```yaml
# Set in config.yaml
alert_type: "email"

# Run system and wait for detection
# Check email inbox
```

### Test Console Alerts
```bash
# Ensure config.yaml has:
alert_type: "console"

# Watch terminal for intrusion messages
```

---

## File Locations

| Component | Location |
|-----------|----------|
| Main code | `main.py` |
| Detector | `src/detector.py` |
| Alerts | `src/alert_handler.py` |
| Config | `config.yaml` |
| Logs | `logs/activity_log.txt` |
| Screenshots | `screenshots/` |
| Sample video | `data/sample_video.mp4` |

---

## System Specs Check

```bash
# Python version (needs 3.8+)
python --version

# GPU support
python -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"

# All dependencies
python -c "import cv2, tensorflow, sklearn; print('OK')"

# Available memory
python -c "import psutil; print(f'{psutil.virtual_memory().available / 1e9:.1f} GB')"
```

---

## Common Errors & Fixes

| Error | Fix |
|-------|-----|
| `Cannot open camera` | Check permissions, try camera index 1-4 |
| `CUDA out of memory` | Reduce frame size, increase skip_frames |
| `Video file not found` | Check path, use absolute path if needed |
| `Email authentication failed` | Verify app password (not regular password) |
| `Slow performance` | Reduce resolution, increase skip_frames |
| `High false positives` | Increase confidence/anomaly thresholds |
| `Missing detections` | Decrease thresholds, check lighting |

---

## Code Snippets for Customization

### Add Custom Alert
```python
# In src/alert_handler.py
def telegram_alert(self, message):
    """Send Telegram alert"""
    requests.post(f'https://api.telegram.org/bot{TOKEN}/sendMessage',
                  json={'chat_id': CHAT_ID, 'text': message})
```

### Adjust Detection Threshold
```python
# In main.py, line ~120
if confidence > 0.4:  # Change this value
    is_intrusion = True
```

### Change Video Resolution
```yaml
# In config.yaml
frame_width: 1280  # Increase for better quality
frame_height: 720
```

### Skip More Frames
```yaml
# In config.yaml
skip_frames: 5  # Process every 5th frame for speed
```

---

## Output Interpretation

### Console Output
```
[2025-01-15 10:30:50] Frame: 125 | Humans: 1 | Confidence: 0.92
```
- **Frame**: Frame number
- **Humans**: Number detected
- **Confidence**: Detection confidence (0-1)

### Intrusion Alert
```
⚠️  INTRUSION DETECTED at 2025-01-15 10:31:02!
    Humans: 1 | Confidence: 0.92 | Anomaly: 0.78
```
- **Confidence > threshold**: Human detected
- **Anomaly > threshold**: Unusual movement

---

## Git Commands for Setup

```bash
# Clone repo
git clone https://github.com/yourusername/AI-Intrusion-Detection-System.git

# Create branch
git checkout -b my-feature

# Commit changes
git add .
git commit -m "feat: Add custom feature"

# Push to GitHub
git push origin my-feature
```

---

## Docker Quick Start (Optional)

```dockerfile
FROM python:3.9
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
CMD ["python", "main.py"]
```

```bash
# Build image
docker build -t intrusion-detection .

# Run container
docker run -v /dev/video0:/dev/video0 intrusion-detection
```

---

## Environment Variables (Advanced)

```bash
# Set credentials via environment
export EMAIL_SENDER="your_email@gmail.com"
export EMAIL_PASSWORD="app_password"

# Use in code
import os
sender = os.getenv('EMAIL_SENDER')
```

---

## Development Workflow

```bash
# 1. Clone and setup
git clone <repo>
cd AI-Intrusion-Detection-System
python -m venv venv
source venv/bin/activate  # or venv\Scripts\activate on Windows
pip install -r requirements.txt

# 2. Create feature branch
git checkout -b feature/my-feature

# 3. Make changes
# Edit files...

# 4. Test
python main.py --source video_file --path data/sample_video.mp4

# 5. Commit
git add .
git commit -m "feat: description"

# 6. Push
git push origin feature/my-feature
```

---

## Performance Benchmarks

### Baseline (defaults)
- FPS: 16-22 (CPU)
- Latency: 45-60ms
- Memory: 800-1200MB

### Optimized for Speed
```yaml
skip_frames: 3
frame_width: 480
frame_height: 360
```
- FPS: 25-35 (CPU)
- Latency: 30-40ms

### Optimized for Accuracy
```yaml
skip_frames: 1
frame_width: 1280
frame_height: 720
```
- FPS: 10-16 (CPU)
- Latency: 60-100ms

---

## Memory Management

```bash
# Monitor memory usage
python -c "
import psutil
import subprocess

process = subprocess.Popen(['python', 'main.py'])
import time
while True:
    p = psutil.Process(process.pid)
    print(f'Memory: {p.memory_info().rss / 1e9:.2f} GB')
    time.sleep(5)
"
```

---

## Log Analysis

```bash
# Count intrusions
grep -c "INTRUSION DETECTED" logs/activity_log.txt

# Last 10 detections
tail -10 logs/activity_log.txt

# Search for specific time
grep "2025-01-15 10:3" logs/activity_log.txt
```

---

## Backup & Restore

```bash
# Backup configuration
cp config.yaml config.yaml.backup

# Backup logs
cp logs/activity_log.txt activity_log.backup

# Restore configuration
cp config.yaml.backup config.yaml
```

---

## Update Dependencies

```bash
# Check for updates
pip list --outdated

# Update all
pip install -r requirements.txt --upgrade

# Save new versions
pip freeze > requirements.txt
```

---

## Help & Documentation

```bash
# Show help
python main.py --help

# View configuration
cat config.yaml

# Read documentation
cat README.md
cat INSTALLATION.md
cat docs/ARCHITECTURE.md
```

---

**Last Updated**: January 2025
**Quick Reference Version**: 1.0
**Status**: Production Ready ✅
